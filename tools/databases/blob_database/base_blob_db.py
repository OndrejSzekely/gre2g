"""
Implements `BaseBlobDB` which is an abstract common interface for all blob databases.
"""


from __future__ import (
    annotations,
)  # allowing future references -> return class under which return value is returned
from typing import Any, List, Optional
from abc import ABC, abstractmethod


class BaseBlobDB(ABC):
    """
    An abstract common interface for all database types. It implements context manager magic methods interface.
    """

    @property
    def PATH_SEPARATOR(self) -> str:  # pylint: disable=invalid-name
        """
        Defines a path separator.

        Returns (str):
        """
        raise NotImplementedError

    @abstractmethod
    def __enter__(self) -> BaseBlobDB:
        """
        Context manager __entry__ method.

        Returns (BaseBlobDB): Itself.
        """

    @abstractmethod
    def __exit__(
        self,
        exc_type: Optional[Exception],
        exc_val: Optional[Any],
        exc_tb: Any,
    ) -> None:
        """
        Context manager __exit__ method.

        Args:
            exc_type (typing.Optional[Exception]): Exception type.
            exc_val (typing.Optional[typing.Any]): Exception value.
            exc_tb (typing.Any): Exception traceback.

        Returns (None):
        """

    @abstractmethod
    def initialize(self) -> None:
        """
        Initializes the database. If the database doesn't exist, it creates a new one. If the database already exists,
        it deletes the old one and creates a new one.
        """

    @abstractmethod
    def get_level_content(self, level_path: List[str]) -> List[str]:
        """
        Returns a database content on `level_path` level.

        Returns (List[str]): Level content.
        """

    @abstractmethod
    def force_add_level(self, new_level_path: List[str], use_hash: bool = True) -> None:
        """
        Adds the new level, the last item in the `new_level_path`, into the database. If levels in the path don't exist
        it adds them too, so the last, new level can be added. If the path already exists, nothing happens.

        Args:
            new_level_path (List[str]): New level path to be added.
            use_hash (bool): Whether use item's name or generate a hash to create item's FS name. If set to `False`,
                item's first 32 characters are used.

        Returns (None):
        """

    @abstractmethod
    def delete_level(self, level_path: List[str]) -> None:
        """
        Deletes the last level in `level_path`. The path is user facing, not internal DB's representation.

        Args:
            level_path (List[str]): Level path.

        Returns (None):

        Exceptions:
            OSError: Raised if `level_path` does not exist.
        """

    @abstractmethod
    def add_file(self, level_path: List[str], file: bytes, file_name_with_ext: str, use_hash: bool = True) -> None:
        """
        Adds file, given with file's bytes `file` into the database into the level `level_path` with
        name `file_name_with_ext`. If `use_hash` is set to `True`, then the FS file name will be generated by hash,
        otherwise file's name will be used. Original file's name is still gonna be used for
        user referencing to the file.

        Args:
            level_path (List[str]): User level facing path where the file is added.
            file (bytes): File bytes.
            file_name_with_ext (str): File's name with extension.
            use_hash (bool): If set to `True` hashing function is used to generate file's name under which the file is
                saved, otherwise file's name is used.

        Returns (None):

        Exceptions:
            OSError: Raised if `level_path` does not exist or `file_path` does not exist.
        """

    @abstractmethod
    def delete_file(self, file_path: List[str]) -> None:
        """
        Deletes the file located on `file_path` from the database (last item). File path has to be user facing, not DB's
        internal representation.

        Args:
            file_path (str): User facing file path to be deleted.

        Returns (None):

        Exceptions:
            OSError: Raised if `file_path` does not exist.
        """

    @abstractmethod
    def get_file(self, file_path: List[str]) -> bytes:
        """
        Returns file's bytes.

        Args:
            file_path (List[str]): Path of the file to be fetched.

        Returns (bytes): File's bytes.

        Exceptions:
            OSError: Raised if `file_path` does not exist.
        """
